// Generated by CoffeeScript 1.6.2
(function() {
  var Zip;

  window.computeBounds = function(zips) {
    var z;

    return d3.geo.bounds({
      type: "MultiPoint",
      coordinates: (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = zips.length; _i < _len; _i++) {
          z = zips[_i];
          _results.push([z.longitude, z.latitude]);
        }
        return _results;
      })()
    });
  };

  Zip = (function() {
    function Zip() {
      var t;

      t = this;
      this.codes = {};
      this.nest = d3.nest().key(function(d) {
        return d.zip.slice(0, 1);
      }).key(function(d) {
        return d.zip.slice(0, 2);
      }).key(function(d) {
        return d.zip.slice(0, 3);
      }).key(function(d) {
        return d.zip.slice(0, 4);
      }).key(function(d) {
        return d.zip.slice(0, 5);
      });
      d3.csv('zipcode.csv', function(zipcodes) {
        var nested, partial, partials, values, _results;

        partials = {};
        zipcodes = zipcodes.filter(function(d) {
          return d.zip.trim();
        });
        nested = t.nest.entries(zipcodes);
        nested.forEach(function(first) {
          partials[first.key] = [];
          return first.values.forEach(function(second) {
            partials[second.key] = [];
            return second.values.forEach(function(third) {
              partials[third.key] = [];
              return third.values.forEach(function(fourth) {
                partials[fourth.key] = [];
                return fourth.values.forEach(function(fifth) {
                  var z;

                  z = fifth.values[0];
                  t.codes[fifth.key] = z;
                  partials[fifth.key] = [z];
                  partials[fourth.key].push(z);
                  partials[third.key].push(z);
                  partials[second.key].push(z);
                  return partials[first.key].push(z);
                });
              });
            });
          });
        });
        t.partials = {};
        _results = [];
        for (partial in partials) {
          values = partials[partial];
          _results.push(t.partials[partial] = computeBounds(values));
        }
        return _results;
      });
    }

    Zip.prototype.to = function(partial) {
      return this.partials[partial];
    };

    Zip.prototype.code = function(code) {
      return this.codes[code];
    };

    Zip.prototype.from = function(lat, lon) {
      throw 'up';
    };

    return Zip;

  })();

  window.Zip = new Zip();

}).call(this);
